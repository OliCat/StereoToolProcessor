#!/bin/bash

# Script d'installation pour la version s√©curis√©e de StereoTool Processor
# Radio Cause Commune

set -e

echo "üîß Installation de la version s√©curis√©e de StereoTool Processor"
echo "================================================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification des pr√©requis
check_prerequisites() {
    print_status "V√©rification des pr√©requis..."
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js n'est pas install√©. Veuillez l'installer avant de continuer."
        exit 1
    fi
    
    node_version=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$node_version" -lt 16 ]; then
        print_error "Node.js version 16+ requis. Version actuelle: $(node --version)"
        exit 1
    fi
    
    print_success "Node.js $(node --version) d√©tect√©"
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        print_error "npm n'est pas install√©."
        exit 1
    fi
    
    print_success "npm $(npm --version) d√©tect√©"
}

# Installation des d√©pendances
install_dependencies() {
    print_status "Installation des d√©pendances..."
    
    if [ -f "package-lock.json" ]; then
        npm ci
    else
        npm install
    fi
    
    print_success "D√©pendances install√©es"
}

# Configuration initiale
setup_configuration() {
    print_status "Configuration initiale..."
    
    # Cr√©er le fichier de configuration s'il n'existe pas
    if [ ! -f "config.js" ]; then
        if [ -f "config.example.js" ]; then
            cp config.example.js config.js
            print_warning "Fichier config.js cr√©√© depuis l'exemple."
            print_warning "IMPORTANT: Modifiez config.js avec vos vraies valeurs de configuration!"
        else
            print_error "Fichier config.example.js non trouv√©."
            exit 1
        fi
    else
        print_success "Fichier config.js d√©j√† pr√©sent"
    fi
}

# Cr√©ation des dossiers n√©cessaires
create_directories() {
    print_status "Cr√©ation des dossiers n√©cessaires..."
    
    directories=("uploads" "outputs" "presets" "temp" "logs")
    
    for dir in "${directories[@]}"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            chmod 755 "$dir"
            print_success "Dossier $dir cr√©√©"
        else
            print_success "Dossier $dir existe d√©j√†"
        fi
    done
}

# Construction de l'application client
build_client() {
    print_status "Construction de l'application client..."
    
    if [ -f "webpack.config.js" ]; then
        npm run build-client
        print_success "Application client construite"
    else
        print_warning "webpack.config.js non trouv√©, construction ignor√©e"
    fi
}

# V√©rification de la configuration
verify_config() {
    print_status "V√©rification de la configuration..."
    
    if [ -f "config.js" ]; then
        node -e "
        try {
            const config = require('./config.js');
            console.log('‚úì Configuration valide');
            
            // V√©rifier les valeurs par d√©faut
            if (config.security.jwtSecret.includes('example') || config.security.jwtSecret === 'your_jwt_secret_here_change_this_in_production') {
                console.log('‚ö†Ô∏è  ATTENTION: Changez le jwtSecret dans config.js');
            }
            
            if (config.database.password.includes('your_secure_password_here')) {
                console.log('‚ö†Ô∏è  ATTENTION: Configurez le mot de passe de la base de donn√©es');
            }
            
            if (config.stereoTool.license.includes('your_license_key_here')) {
                console.log('‚ö†Ô∏è  ATTENTION: Configurez votre licence StereoTool');
            }
        } catch (error) {
            console.error('‚ùå Erreur dans config.js:', error.message);
            process.exit(1);
        }
        "
    else
        print_error "Fichier config.js manquant"
        exit 1
    fi
}

# Menu d'installation
show_menu() {
    echo ""
    echo "üöÄ Choisissez le type d'installation:"
    echo "1) Installation compl√®te (d√©veloppement local)"
    echo "2) Installation pour production (avec base de donn√©es)"
    echo "3) Migration depuis l'ancienne version"
    echo "4) Installation des d√©pendances uniquement"
    echo "5) Quitter"
    echo ""
    read -p "Votre choix (1-5): " choice
    
    case $choice in
        1)
            install_development
            ;;
        2)
            install_production
            ;;
        3)
            migrate_from_old
            ;;
        4)
            install_dependencies_only
            ;;
        5)
            echo "Installation annul√©e."
            exit 0
            ;;
        *)
            print_error "Choix invalide."
            show_menu
            ;;
    esac
}

# Installation pour d√©veloppement
install_development() {
    print_status "Installation pour d√©veloppement local..."
    
    check_prerequisites
    install_dependencies
    setup_configuration
    create_directories
    build_client
    verify_config
    
    print_success "Installation de d√©veloppement termin√©e!"
    echo ""
    echo "üìã Prochaines √©tapes:"
    echo "1. Modifiez config.js avec vos param√®tres"
    echo "2. D√©marrez avec: npm run dev"
    echo "3. Acc√©dez √† http://localhost:3000"
}

# Installation pour production
install_production() {
    print_status "Installation pour production..."
    
    check_prerequisites
    
    # V√©rifier MySQL
    if ! command -v mysql &> /dev/null; then
        print_error "MySQL n'est pas install√©. Installez-le d'abord."
        exit 1
    fi
    
    install_dependencies
    setup_configuration
    create_directories
    build_client
    verify_config
    
    # Instructions pour la production
    print_success "Installation de base termin√©e!"
    echo ""
    print_warning "‚ö†Ô∏è  CONFIGURATION PRODUCTION REQUISE:"
    echo "1. Configurez MySQL et cr√©ez la base de donn√©es"
    echo "2. Modifiez config.js avec vos vrais param√®tres"
    echo "3. Configurez HTTPS avec des certificats SSL"
    echo "4. Utilisez PM2 pour la gestion des processus"
    echo "5. Configurez Nginx comme reverse proxy"
    echo ""
    echo "üìñ Consultez DEPLOYMENT_GUIDE.md pour les d√©tails complets"
}

# Migration depuis l'ancienne version
migrate_from_old() {
    print_status "Migration depuis l'ancienne version..."
    
    # Sauvegarder l'ancienne configuration
    if [ -f "src/server/index.js" ]; then
        print_status "Sauvegarde de l'ancienne configuration..."
        cp src/server/index.js src/server/index-backup-$(date +%Y%m%d_%H%M%S).js
        print_success "Ancienne version sauvegard√©e"
    fi
    
    check_prerequisites
    install_dependencies
    setup_configuration
    create_directories
    build_client
    verify_config
    
    print_success "Migration termin√©e!"
    echo ""
    print_warning "üìã Actions requises apr√®s migration:"
    echo "1. Configurez config.js avec vos param√®tres"
    echo "2. Cr√©ez la base de donn√©es MySQL"
    echo "3. Testez la nouvelle version avec: node src/server/index-secure.js"
    echo "4. Migrez vos donn√©es si n√©cessaire"
}

# Installation des d√©pendances uniquement
install_dependencies_only() {
    print_status "Installation des d√©pendances uniquement..."
    check_prerequisites
    install_dependencies
    print_success "D√©pendances install√©es!"
}

# Script de test
run_tests() {
    print_status "Ex√©cution des tests de configuration..."
    
    # Test de la configuration
    node -e "
    try {
        const config = require('./config.js');
        console.log('‚úì Configuration charg√©e avec succ√®s');
        
        // Test des modules requis
        require('./src/server/models');
        console.log('‚úì Mod√®les de base de donn√©es OK');
        
        require('./src/server/middleware/auth');
        console.log('‚úì Middlewares d\\'authentification OK');
        
        console.log('‚úÖ Tous les tests pass√©s!');
    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
        process.exit(1);
    }
    "
}

# Script principal
main() {
    echo "üéµ StereoTool Processor - Radio Cause Commune"
    echo "Installation de la version s√©curis√©e"
    echo "=========================================="
    echo ""
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if [ ! -f "package.json" ]; then
        print_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet (o√π se trouve package.json)"
        exit 1
    fi
    
    # V√©rifier si c'est une installation interactive ou automatique
    if [ "$1" = "--auto" ]; then
        install_development
    elif [ "$1" = "--production" ]; then
        install_production
    elif [ "$1" = "--migrate" ]; then
        migrate_from_old
    elif [ "$1" = "--test" ]; then
        run_tests
    else
        show_menu
    fi
}

# Ex√©cution du script principal
main "$@" 